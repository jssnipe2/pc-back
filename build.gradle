/***********************************************************************************
 * 빌드 공통 설정 파일 수정
 ***********************************************************************************/
buildscript {
	ext {
		springBootVersion = "3.2.2"
//		springCloudVersion = "Hoxton.SR9"
//		springFrameworkVersion = "5.2.18.RELEASE"
//		lombokVersion = "1.18.22"
//		osppCoreVersion = "1.0.0-SNAPSHOT"
//		mapstructVersion = "1.4.2.Final"
//		lombokMapstructBinding = "0.2.0"
	}

//	dependencies {
//		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
//		classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
//		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.2"
//		classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
//	}
}

/***********************************************************************************
 * 플러그인 설정
 ***********************************************************************************/
plugins {
//	id "java-library"
	id 'java'
	id "org.springframework.boot" version "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.1.6'
}

/***********************************************************************************
 * 현재 어플리케이션 설정
 ***********************************************************************************/
group = 'com.lguplus'
version = '0.0.1-SNAPSHOT'
description = "LG Uplus privacy center"
//sourceCompatibility = "17"

//java {
//	toolchain {
//		languageVersion = JavaLanguageVersion.of(17)
//	}
//}

/***********************************************************************************
 * 리파지토리 설정
 ***********************************************************************************/
repositories {
	mavenCentral()
}

/***********************************************************************************
 * 의존 라이브러리
 ***********************************************************************************/
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.projectlombok:lombok'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	annotationProcessor 'org.projectlombok:lombok'
}

/***********************************************************************************
 * Task : 기본
 ***********************************************************************************/
ext.profile = (!project.hasProperty("profile") || !profile) ? "local" : profile
//프로필 리소스
sourceSets {
	println "current profile : ${profile}"
	main {
		java {
			srcDirs "src/main/java"
		}
		resources {
			srcDirs "src/main/resources"
		}
	}
}

//create jar
jar {
	enabled = true
}

//create boot-jar
bootJar {
	enabled = true
	archiveClassifier = "boot"
	archiveFileName = "privacy-center.jar"
}

//boot-run
bootRun {
	doFirst {
		jvmArgs =["-Djava.net.preferIPv4Stack=true"]
	}
	logger.lifecycle("jvmArgs={}", jvmArgs)
}

// duplicatesStrategy
tasks {
	processResources {
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
	}
}

//실행 프로필
tasks.register("setSpringProfile") {
	group = "Application"
	doFirst() {
		if (sourceSets.profile == null) {
			logger.lifecycle("profiles not set!")
			logger.lifecycle("if you want to set profile, pass value through the gradle argument. see example => bootRun -Pprofiles=develop")
			return
		}
		bootRun {
			args = ["--spring.profiles.active=${sourceSets.profile}"]
		}
	}
}
bootRun.dependsOn(setSpringProfile)

//tasks.named('test') {
//	useJUnitPlatform()
//}

/***********************************************************************************
 * Task : 추가
 ***********************************************************************************/
//Local Eclipse 기동 설정
//eclipse {
//	classpath {
//		downloadSources = true
//		downloadJavadoc = true
//		defaultOutputDir = file("${buildDir}/classes/java/main")
//	}
//}

//Java Document
//javadoc {
//	options.encoding="UTF-8"
//	options.tags = [ "Class:t:Class", "Description:t:Description", "Modification:t:Modification" ]
//	if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
//		executable = "C:\\jdk-17.0.2\\bin\\javadoc"
//	}
//}

configurations {
	//devtools
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	//Library Cache
	configureEach {
		resolutionStrategy.cacheChangingModulesFor 0, "seconds"
		resolutionStrategy {}
	}
	all {
		//logback과의 충돌 방지
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

//기존 빌드 산출물 제거
//[distZip, distTar, bootDistTar, bootDistZip].each { task ->
//	configurations.archives.artifacts.removeAll {
//		it.type == "zip" || it.type == "tar"
//	}
//	task.enabled = false
//}

//Test
test {
	useJUnitPlatform()
}
